====== DNSSEC ======

=== Q1. What does a validating resolver do?  ===

It works the same way as a normal resolver,
but has the DNSSEC added.
This means that it will verify the queries it sends by
checking the RRSIG on the DNSKEY and verify the RRSIG for the DS record.
The hash of the DS (located at parent) should match the public KSK
of the zone (child) one is querying.
All to verify that the chain of trust is not altered.

=== Q2. Add support for DNSSEC to your BIND or Unbound configuration  ===
== a. What changes do you have to make to your configuration?  == 

DNSSEC enabled in named.conf:
<code>
options {
directory "/usr/local/etc/bind";
//For dns labs we want recursion, for mail labs we do not
//recursion no;
allow-recursion { 0/0; };
fetch-glue yes;
//DNSSEC lab
dnssec-enable yes;
dnssec-validation auto;
};
//the auto will get the root DNSKEY (KSK=257) for us
//managed-keys {};
</code>
Bind can do 'managed-keys' itself when validation is set to auto.

== b. Verify the root key used against a trusted source  == 

We first get the keys:
<code>
dig DNSKEY . \
  @d.root-servers.net \
  +noall +answer \
  > /tmp/root.key
</code>

Now we verify:
<code>
root@nevers:~/bind# docker exec -it bind_bind_1 bash
bash-4.4# dnssec-dsfromkey -f /tmp/root.key -2 .
. IN DS 19036 8 2 49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5
. IN DS 20326 8 2 E06D44B80B8F1D39A95C0B0D7C65D08458E880409BBC683457104237C7F8EC8D
</code>
Which matches [[https://data.iana.org/root-anchors/root-anchors.xml|data.iana.org/...xml]]


=== Q3. Use dig or drill to verify the validity of DNS records for isc org and os3 nl Show the results  ===

<code>
root@nevers:~/bind# dig os3.nl. @145.100.104.117 +dnssec

; <<>> DiG 9.11.3-1ubuntu1.2-Ubuntu <<>> os3.nl. @145.100.104.117 +dnssec
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 48134
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags: do; udp: 4096
; COOKIE: 493682ef4eb3a9aae5a572ba5bbc44c23d2414f60ea8a98e (good)
;; QUESTION SECTION:
;os3.nl.                                IN      A

;; ANSWER SECTION:
os3.nl.                 21600   IN      A       145.100.96.70
os3.nl.                 21600   IN      RRSIG   A 5 2 21600 20181107180929 20181008180929 42048 os3.nl. p+tyj9b/6HtX6Yx05y670ZrU5i71AzHr4v7285QQUBHL1A5KOOSD3q9S GPRch/iUe2zuSYSXJQy/aeLuKikoKhEGZrPGqtKFSwo39UD5yue5EpBU s8cHrgwq010PzPpJc4KzRP6/7e9Xq4qHTNw2WkbXvG5B41mwZtKrlmG4 7sc=

;; Query time: 840 msec
;; SERVER: 145.100.104.117#53(145.100.104.117)
;; WHEN: Tue Oct 09 08:03:46 CEST 2018
;; MSG SIZE  rcvd: 245
</code>

<code>
root@nevers:~/bind# dig isc.org. @145.100.104.117 +dnssec               

; <<>> DiG 9.11.3-1ubuntu1.2-Ubuntu <<>> isc.org. @145.100.104.117 +dnssec
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 34734
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags: do; udp: 4096
; COOKIE: 4957dc002cc096f0cc575d1c5bbc44f801dbfe82dd2611ab (good)
;; QUESTION SECTION:
;isc.org.                       IN      A

;; ANSWER SECTION:
isc.org.                60      IN      A       149.20.64.69
isc.org.                60      IN      RRSIG   A 5 2 60 20181107233627 20181008233627 19923 isc.org. X9RdA1T3FmMfzQvVbWkxQ7KLP2pl2U/nDoZFTL0MrTIjWgPzH9BdMmbF OxZbAFgNn//w2IgAHS7dSCwZOQQcmj5xJP9dkekh0jewfpbalLY7EhIl xtXGMteGYpN9e4BWwbPiKmH/5iT3/GXvbeo2B0Hh90waQ2xTKetpjuv/ at4=

;; Query time: 548 msec
;; SERVER: 145.100.104.117#53(145.100.104.117)
;; WHEN: Tue Oct 09 08:04:40 CEST 2018
;; MSG SIZE  rcvd: 247
</code>

=== Q4. How does dig / drill show whether DNSSEC validation was succesful or not?  ===

<code>
man dig| grep -A 3 adflag
       +[no]adflag
           Set [do not set] the AD (authentic data) bit in the query.
           This requests the server to return whether all of the
           answer and authority sections have all been validated as
</code>
So we look for this flag.

<code>
dig lent.ink. @145.100.104.117 +dnssec|grep flags|head -1
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
</code>
Which is correct,
since IANA [[https://www.icann.org/resources/pages/deployment-2012-02-25-en|tells me]]
that my domain provider (NameSilo) does not provide DNSSEC for .ink.

Further analysis:
<code>
root@nevers:~/bind# dig uva.nl. @145.100.104.117 +dnssec|grep flags|head -1
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
root@nevers:~/bind# dig google.com. @145.100.104.117 +dnssec|grep flags|head -1                                                                 
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
root@nevers:~/bind# dig os3.nl. @145.100.104.117 +dnssec|grep flags|head -1
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
</code>
even Google has no DNSSEC, which I verified
[[https://dnssec-analyzer.verisignlabs.com/google.com|online]].


=== Q5. Where does BIND/Unbound store the DNSSEC root key?  ===

<code>
bash-4.4# ls -al|grep keys
-rw-r--r--    1 root     root          2761 Sep 28 14:51 bind.keys
-rw-r--r--    1 root     root          1421 Oct  9 05:47 managed-keys.bind
-rw-r--r--    1 root     root          2430 Oct  9 05:47 managed-keys.bind.jnl
</code>
As we seen earlier in the config, this is the same name as the config option managed-keys.

=== Q6. How do managed keys differ from trusted keys ? Which RFC describes the mechanisms for managed keys?  ===

<code>
bash-4.4# cat managed-keys.bind
$ORIGIN .
$TTL 0  ; 0 seconds
@                       IN SOA  . . (
                                2          ; serial
                                0          ; refresh (0 seconds)
                                0          ; retry (0 seconds)
                                0          ; expire (0 seconds)
                                0          ; minimum (0 seconds)
                                )
                        KEYDATA 20181010054715 20181009054715 19700101000000 257 3 8 (
                                AwEAAagAIKlVZrpC6Ia7gEzahOR+9W29euxhJhVVLOyQ
                                bSEW0O8gcCjFFVQUTf6v58fLjwBd0YI0EzrAcQqBGCzh
                                /RStIoO8g0NfnfL2MTJRkxoXbfDaUeVPQuYEhg37NZWA
                                JQ9VnMVDxP/VHL496M/QZxkjf5/Efucp2gaDX6RS6CXp
                                oY68LsvPVjR0ZSwzz1apAzvN9dlzEheX7ICJBBtuA6G3
                                LQpzW5hOA2hzCTMjJPJ8LbqF6dsV6DoBQzgul0sGIcGO
                                Yl7OyQdXfZ57relSQageu+ipAdTTJ25AsRTAoub8ONGc
                                LmqrAmRLKBP1dfwhYB4N7knNnulqQxA+Uk1ihz0=
                                ) ; KSK; alg = RSASHA256; key id = 19036
                                ; next refresh: Wed, 10 Oct 2018 05:47:15 GMT
                                ; trusted since: Tue, 09 Oct 2018 05:47:15 GMT
                        KEYDATA 20181010054715 20181009054715 19700101000000 257 3 8 (
                                AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTO
                                iW1vkIbzxeF3+/4RgWOq7HrxRixHlFlExOLAJr5emLvN
                                7SWXgnLh4+B5xQlNVz8Og8kvArMtNROxVQuCaSnIDdD5
                                LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF0jLHwVN8
                                efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7
                                pr+eoZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLY
                                A4/ilBmSVIzuDWfdRUfhHdY6+cn8HFRm+2hM8AnXGXws
                                9555KrUB5qihylGa8subX2Nn6UwNR1AkUTV74bU=
                                ) ; KSK; alg = RSASHA256; key id = 20326
                                ; next refresh: Wed, 10 Oct 2018 05:47:15 GMT
                                ; trusted since: Tue, 09 Oct 2018 05:47:15 GMT
</code>

RFC5011 describes the managed-keys,
which can be auto-updated,
which we see in the file (next refresh).
Trusted keys are updated manually (or you can script it..).

=== Q7. How did you modify the DNSSEC root key?  ===

Replacing all '/' in base64 with an 'a':
<code>
cp managed-keys.bind managed-keys.bind.bak
sed -i 's/\//a/g' managed-keys.bind
</code>

Reloaded named:
<code>
docker-compose restart bind
</code>

=== Q8. What problems did your server encounter and how did it react?  ===

<code>
root@nevers:~/bind# dig os3.nl. @145.100.104.117 +dnssec|grep flags|head -1
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1
root@nevers:~/bind# dig os3.nl. @145.100.104.117 +dnssec

; <<>> DiG 9.11.3-1ubuntu1.2-Ubuntu <<>> os3.nl. @145.100.104.117 +dnssec
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: SERVFAIL, id: 10833
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags: do; udp: 4096
; COOKIE: 347680a0d3bd536a391e73055bbc4c5068d08788541e038b (good)
;; QUESTION SECTION:
;os3.nl.                                IN      A

;; Query time: 1 msec
;; SERVER: 145.100.104.117#53(145.100.104.117)
;; WHEN: Tue Oct 09 08:36:00 CEST 2018
;; MSG SIZE  rcvd: 63
</code>

We got ourself a SERVFAIL.

=== Q9. Look up which cryptographic algorithms are available for use in DNSSEC Which one do you prefer and why?  ===

<code>
curl --silent https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.txt \
  | grep -A 6 Reserved | head -20
      4    Reserved                                                         [RFC6725]
      5    RSA/SHA-1                      RSASHA1               Y      Y    [RFC3110][RFC4034]
      6    DSA-NSEC3-SHA1                 DSA-NSEC3-SHA1        Y      Y    [RFC5155][proposed standard]
      7    RSASHA1-NSEC3-SHA1             RSASHA1-NSEC3-SHA1    Y      Y    [RFC5155][proposed standard]
      8    RSA/SHA-256                    RSASHA256             Y      *    [RFC5702][proposed standard]
      9    Reserved                                                         [RFC6725]
     10    RSA/SHA-512                    RSASHA512             Y      *    [RFC5702][proposed standard]
     11    Reserved                                                         [RFC6725]
     12    GOST R 34.10-2001              ECC-GOST              Y      *    [RFC5933][standards track]
     13    ECDSA Curve P-256 with SHA-256 ECDSAP256SHA256       Y      *    [RFC6605][standards track]
     14    ECDSA Curve P-384 with SHA-384 ECDSAP384SHA384       Y      *    [RFC6605][standards track]
     15    Ed25519                        ED25519               Y      *    [RFC8080][standards track]
     16    Ed448                          ED448                 Y      *    [RFC8080][standards track]
   17-122  Unassigned
   123-251 Reserved                                                         [RFC4034][RFC6014]
     252   Reserved for Indirect Keys     INDIRECT              N      N    [RFC4034][proposed standard]
     253   private algorithm              PRIVATEDNS            Y      Y    [RFC4034]
     254   private algorithm OID          PRIVATEOID            Y      Y    [RFC4034]
     255   Reserved                                                         [RFC4034][proposed standard]

curl --silent https://tools.ietf.org/id/draft-sury-dnskey-ed25519-02.xml|grep -A 2 targeted
      <t>Ed25519 is targeted to provide attack resistance comparable
      to quality 128-bit symmetric ciphers that is equivalent
      strength of RSA with 3072-bit keys.  Public keys are 256 bits
--
      <t>Ed448 is targeted to provide attack resistance comparable
      to quality 224-bit symmetric ciphers that is equivalent
      strength of RSA with ~12448-bit keys.  However only RSA with
--
      <t>Ed25519 is targeted to provide attack resistance comparable
      to quality 128-bit symmetric ciphers, and Ed448 is targeted to
      provide attack resistance comparable to quality 224-bit
      symmetric ciphers.  Such an assessment could, of course, change

</code>
RFC8080 is the newest, we'll go for ED25519 since 128-bit is sufficient for our use case
(we are not an online bank).

=== Q10. In practice different algorithms key sizes and key lifetimes are chosen for KSKs and ZSKs Discuss what are these differences in  ===
== a. algorithms  ==
There are algorithms based on the descrete log problem (RSA)
and the Eliptic Curve based algorithms (where are more efficient).
If ever there is a security hole discovered in one of them,
it is nice to have a backup ready of the other,
so a smooth transition (rollover) can be done.

Note that there does not need to be an issue with the algorithm itself,
there can also be an issue with a certain implementations on some systems,
which makes it desirable to phase that one out.

== b. key sizes  ==
The KSK is changed less often (see c.)
and therefore has a longer lifespan
and thus a larger time window to bruteforce
and more valuable to bruteforce (since you can abuse it longer).
This makes the KSK more valuable and thus needs to be protected
by a larger key size than the ZSK.


== c. key lifetimes  == 
The key that is communicated to the parent,
requires communication with the parent
(which is usually a manual action in webportal of your DNS provider).
This requires more effort and therefore you have a separate key for your own zone,
by which you sign all your records and you can do an easy rollover,
while the KSK which signs this ZSK is the one you change less frequently.



=== Q11. Choose appropriate algorithms key sizes and key lifetimes for your KSK and ZSK  ===

For the KSK we choose 1y (since I expect to have finished this masters by then),
for the ZSK we choose 1q (=3m).

For ED*, the key size is ignored:
<code>
dnssec-keygen --help 2>&1|grep ED
        ED25519 | ED448 | DH |
        ED25519:        ignored
        ED448:  ignored
</code>
I'll use ED25519 for both.

=== Q12. Show the signed version of your zone file How does it differ from the unsigned version? Any unexpected differences?  ===

<code>
dnssec-keygen -a ED25519 \
  -3 \
  -f KSK \
  -L 60 \
  -I $((60*60*24*365)) \
  nevers.prac.os3.nl.
  
</code>

But this is not possible, which we read here:
https://github.com/isc-projects/bind9/blob/master/CHANGES
<code>
4665.	[protocol]	Added support for ED25519 and ED448 DNSSEC signing
			algorithms (RFC 8080). (Note: these algorithms
			depend on code currently in the development branch
			of OpenSSL which has not yet been released.)
			[RT #44696]
</code>

So I'll use (note that you would normally not choose a TTL of 60 for the KSK):
<code>
dnssec-keygen -a RSASHA256 -b 1024 \
  -3 \
  -f KSK \
  -L 60 \
  -I $((60*60*24*365)) \
  nevers.prac.os3.nl.
dnssec-keygen: fatal: time value 31536000 is invalid: out of range
</code>
So the output was without -I.

<code>
Generating key pair.................++++++ ........................++++++ 
Knevers.prac.os3.nl.+008+51934
bash-4.4# cat Knevers.prac.os3.nl.+008+51934.key 
; This is a key-signing key, keyid 51934, for nevers.prac.os3.nl.
; Created: 20181012131435 (Fri Oct 12 13:14:35 2018)
; Publish: 20181012131435 (Fri Oct 12 13:14:35 2018)
; Activate: 20181012131435 (Fri Oct 12 13:14:35 2018)
nevers.prac.os3.nl. 60 IN DNSKEY 257 3 8 AwEAAaSpowYZSEwg+WFwPZ7RV6w0aCYwLYHDwI+WlKDe5pDsH4MidrFg JiWNi63EFcPVTywKWoO6jWXqzS3I9rqTMkZN7Vj6ub9A5UydGcjk/XPD LlFbKvoFND2YktG94X1e2w8wc4eIilmKINkZgdEQ2w/G1xrsOg8Q2iRB xCfWd3Lh
bash-4.4# cat Knevers.prac.os3.nl.+008+51934.private|grep -v =
Private-key-format: v1.3
Algorithm: 8 (RSASHA256)
PublicExponent: AQAB
Created: 20181012131435
Publish: 20181012131435
Activate: 20181012131435
</code>

We add the key to our zone:
<code>
echo '$INCLUDE '`ls K*.key` >> myprac.conf 
</code>

We do the same for the ZSK,
but without the '-f KSK'
<code>
dnssec-keygen -a RSASHA256 -b 1024 \
  -3 \
  -L 60 \
  nevers.prac.os3.nl.

echo '$INCLUDE '`ls -tr K*.key|tail -1` >> myprac.conf 
</code>


<code>
dnssec-signzone -A -t \
  -o nevers.prac.os3.nl. \
  myprac.conf

Verifying the zone using the following algorithms: RSASHA256.
Zone fully signed:
Algorithm: RSASHA256: KSKs: 1 active, 0 stand-by, 0 revoked
                      ZSKs: 1 active, 0 stand-by, 0 revoked
myprac.conf.signed
Signatures generated:                       20
Signatures retained:                         0
Signatures dropped:                          0
Signatures successfully verified:            0
Signatures unsuccessfully verified:          0
Signing time in seconds:                 0.010
Signatures per second:                1942.501
Runtime in seconds:                      0.059

ls -ltr|tail -2
-rw-r--r--    1 root     root          7788 Oct 12 13:54 myprac.conf.signed
-rw-r--r--    1 root     root           179 Oct 12 13:54 dsset-nevers.prac.os3.nl.

bash-4.4# cat myprac.conf.signed 
; File written on Fri Oct 12 13:54:33 2018
; dnssec_signzone version 9.12.2-P1
nevers.prac.os3.nl.     60      IN SOA  ns1.nevers.prac.os3.nl. sander.lent.ink. (
                                        2018092502 ; serial
                                        60         ; refresh (1 minute)
                                        60         ; retry (1 minute)
                                        60         ; expire (1 minute)
                                        60         ; minimum (1 minute)
                                        )
                        60      RRSIG   SOA 8 4 60 (
                                        20181111125433 20181012125433 37755 nevers.prac.os3.nl.
                                        CqEk2lKEpjnd7DO6XUPIVv4Qgh6KC4tBAmTd
                                        BMBxbVMfvAGhVvuncRtE9IuHqTNxWSq8PblC
                                        3uVxZ+/37UdOWe/rfO+I/UPzQe3MWlYrD0NQ
                                        +DOlxgkUmM8qcHqjz7MGSeNANT4BGDClFHc3
                                        bnAXcFCk3Ikgb0w+XH9EcFw4UUQ= )
                        60      NS      ns1.nevers.prac.os3.nl.
                        60      NS      nevers.prac.os3.nl.
                        60      RRSIG   NS 8 4 60 (
                                        20181111125433 20181012125433 37755 nevers.prac.os3.nl.
                                        g5NPthxXW0iaBl/7OhMI01u16LQYc5GkoLgx
                                        YDydPEKnIRsWswRwHsXruobme/ISY/Bs55wU
                                        VTRAbKyBrFyWNl2QQWDBHJunxyGvEehs0AdS
                                        RuH+z7I9n0Yz5yc0ITkqM8YM2ngkS7miCea/
                                        CMDzLq54HXJbbcGHlNCSiIWP5vU= )
                        60      A       145.100.104.117
                        60      RRSIG   A 8 4 60 (
                                        20181111125433 20181012125433 37755 nevers.prac.os3.nl.
                                        xdktS38dHpCyL7MOkK1sEIK74P7Mb4EeAruF
                                        ZvE+XYcj8aA0d4/2yNSjau5KdS6M4e6UDD6V
                                        QOExW+V5qogwU3LtDbzrFmc44uXc1Roz1uzJ
                                        L3T/52Rv04/sp46uoYBCBIrXuxl5VGEm0+/F
                                        RuKqzxitCeiPyiQJbk+Saq+ojGA= )
                        60      MX      10 mailserver.nevers.prac.os3.nl.
                        60      MX      11 secondary.nevers.prac.os3.nl.
                        60      MX      30 hull.prac.os3.nl.
                        60      MX      31 mail.hull.prac.os3.nl.
                        60      RRSIG   MX 8 4 60 (
                                        20181111125433 20181012125433 37755 nevers.prac.os3.nl.
                                        vl4cTp2KnQxHD1Ygd86dtBF+C6UACoKbv2Io
                                        U5Pw/+0mC6mJ756Tvv60Ur0CV3+/+vGJl1Vf
                                        DXCJe5XvxqBY1FpUMHmBctriHV4UdUP/3T0o
                                        SAAUJvc6rWFc9guUTGS0SsyGzoOgB4r4/7kh
                                        vqfzuV0FCEzZgYqLdUVq9GGowAg= )
. . .
</code>
What is the difference?
Nicely structured,
no comments and a signature after each record group.



=== Q13. Which DS record do you need to send to Niels and why that one? Once Niels has implemented your DS record use a DNSSEC debugger to examine the chain of trust see http //dnssec-debugger verisignlabs com/ (use more detail ) or http //dnsviz net/  ===

Changed the config:
<code>
sed -i 's/myprac.conf/myprac.conf.signed/g' named.conf
</code>

Testing it:
<code>
dig nevers.prac.os3.nl. dnskey

; <<>> DiG 9.10.3-P4-Ubuntu <<>> nevers.prac.os3.nl. dnskey
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45734
;;flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;nevers.prac.os3.nl.            IN      DNSKEY

;; ANSWER SECTION:
nevers.prac.os3.nl.     60      IN      DNSKEY  256 3 8 AwEAAdzMrtrYbvToum3dMg7Iq8x27xH+aT/eDDjby5/7NSR2Nm81u7LK wOWEJ/vtxpaK6lcv7pQMDWe/+mPXWi/PNHifX1M7YJfg9NMl1ZX0pzPQ TVuz2sMf2euF25vdAI1G5edszwPcyz/MNVA7jf9umSJ76h4P8Slf5kUL WlzyS+XV
nevers.prac.os3.nl.     60      IN      DNSKEY  257 3 8 AwEAAaSpowYZSEwg+WFwPZ7RV6w0aCYwLYHDwI+WlKDe5pDsH4MidrFg JiWNi63EFcPVTywKWoO6jWXqzS3I9rqTMkZN7Vj6ub9A5UydGcjk/XPD LlFbKvoFND2YktG94X1e2w8wc4eIilmKINkZgdEQ2w/G1xrsOg8Q2iRB xCfWd3Lh

;; Query time: 38 msec
;; SERVER: 10.1.94.8#53(10.1.94.8)
;; WHEN: Fri Oct 12 13:57:51 UTC 2018
;; MSG SIZE  rcvd: 343
</code>

Record for my parent:
<code>
cat dsset-nevers.prac.os3.nl. 
nevers.prac.os3.nl.     IN DS 51934 8 1 6E5CC2ED0F8302E186AB01F378BE02C170AF3740
nevers.prac.os3.nl.     IN DS 51934 8 2 78FFC57A999994ED5C9DF070B2679034EBF44C5C5779051512A595D3 8BB82808
</code>
or:
<code>
dig @145.100.104.117 dnskey nevers.prac.os3.nl | dnssec-dsfromkey -f - nevers.prac.os3.nl
nevers.prac.os3.nl. IN DS 51934 8 1 6E5CC2ED0F8302E186AB01F378BE02C170AF3740
nevers.prac.os3.nl. IN DS 51934 8 2 78FFC57A999994ED5C9DF070B2679034EBF44C5C5779051512A595D38BB82808
</code>

This is the KSK, the one that has a longer lifespan,
which is communicated to the parent.
An alternative is to use the KSK for signing the zone (-z option),
but seperating the ZSK and KSK is a good practice.

"The idea behind this separation is that there are only a few signatures to validate that were made with a KSK,
so it can have a higher security qualification than the ZSK.
Having a longer KSK means less rollover of these keys,
and thus less of the complicated interactions with the parent zone."
[[https://blog.surf.nl/en/cryptographic-sanity-key-sizes/|src]]

Since I wanted to finish my lab in the weekend
and my DS record was not set,
I wrote a
[[https://github.com/svlentink/dockerfiles/blob/master/svlentink/dnssec/gen_dnssec.py|script]]
to automate the process and used another domain at Namesilo,
so I could insert the record myself at the registrar:
<code>
root@nevers:~/bind/dnssec# ip a a 145.100.111.11 dev eno1
root@nevers:~/bind/dnssec# cat myzones/os3.club.zone 
$TTL 60
@ IN SOA ns1.os3.club. sander.lent.ink. (
    2018101401 ; Serial
    60         ; Refresh
    60         ; Retry
    60         ; Expire
    60 )       ; Negative Cache TTL

@ IN NS os3.club.
@ IN NS ns1.os3.club.
@ IN NS ns2.os3.club.
os3.club. IN A 145.100.111.11
ns1.os3.club. IN A 145.100.111.11
ns2.os3.club. IN A 145.100.111.11
www.os3.club. IN CNAME www.lent.ink.
root@nevers:~/bind/dnssec# cat docker-compose.yml 
version: '3'
services:
  dns:
    image: svlentink/dnssec
    environment:
      IPV4MASTER: 145.100.111.11
      SERVERTYPE: master
    volumes:
      - $PWD/myzones:/zonefiles
      - $PWD/dnskeys:/keys
    ports:
      - 145.100.111.11:53:53/tcp
      - 145.100.111.11:53:53/udp
root@nevers:~/bind/dnssec# docker-compose up -d
Creating network "dnssec_default" with the default driver
Pulling dns (svlentink/dnssec:latest)...
latest: Pulling from svlentink/dnssec
4fe2ade4980c: Already exists
7cf6a1d62200: Pull complete
b66090d9998c: Pull complete
e0dc374a57ff: Pull complete
eb580e903ff2: Pull complete
f262fd436a9c: Pull complete
870577acc9a6: Pull complete
0f1446a347b3: Pull complete
Digest: sha256:b8674342c94c44a372c64d435075c04087f322766c9d2972c5929651ba63e91b
Status: Downloaded newer image for svlentink/dnssec:latest
Creating dnssec_dns_1 ... 
Creating dnssec_dns_1 ... done
Attaching to dnssec_dns_1
dns_1  | Kos3.club.+007+35148
dns_1  | Kos3.club.+007+18188
dns_1  | cd /keys; dnssec-keygen -n ZONE -a NSEC3RSASHA1 -L 600 -b 4096 -f KSK os3.club.
dns_1  | cd /keys; dnssec-keygen -n ZONE -a NSEC3RSASHA1 -L 600 -b 2048 os3.club.
dns_1  | You need to insert the DS records at your Domain registrar.
dns_1  | from host: dig @127.0.0.1 dnskey example.com | dnssec-dsfromkey -f - example.com
dns_1  | inside container: dnssec-dsfromkey -a SHA-( 1 | 256 ) /keys/Kexample.net.+008+50707.key
root@nevers:~/bind/dnssec# tree
.
├── dnskeys
│   ├── Kos3.club.+007+18188.key
│   ├── Kos3.club.+007+18188.private
│   ├── Kos3.club.+007+35148.key
│   └── Kos3.club.+007+35148.private
├── docker-compose.yml
└── myzones
    ├── os3.club.zone
    ├── os3.club.zone.jbk
    ├── os3.club.zone.signed
    └── os3.club.zone.signed.jnl

2 directories, 9 files
root@nevers:~/bind/dnssec# dig @145.100.111.11 dnskey os3.club | dnssec-dsfromkey -f - os3.club
os3.club. IN DS 35148 7 1 6ED7AD9EDC9AB06F50D2DE3870F9AD25CD649EF2
os3.club. IN DS 35148 7 2 7507E5404A929511163BD46EA9A9276D6D6C40186B8C7B560A2080D4F8673672
os3.club. IN DS 61716 7 1 A7765AAC98C0E3BD7D1C7113FF3D8FCA2C6BB14C
os3.club. IN DS 61716 7 2 15D7D5099353627552A13F4634F777A3C649467212DDEAC16ADFE52D187AEA51
root@nevers:~/bind/dnssec/dnskeys# head -1 Kos3.club.+007+35148.key 
; This is a key-signing key, keyid 35148, for os3.club.
</code>
So we input the 35148 key into our domain registrars web portal.

{{:2018-2019:students:sander_lentink:cia:webui.png?direct|}}

And after about 15minutes we see:
<code>
sandermacbook:~ sanderlentink$ dig DS os3.club

; <<>> DiG 9.10.6 <<>> DS os3.club
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 63771
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;os3.club.			IN	DS

;; AUTHORITY SECTION:
club.			59	IN	SOA	ns1.dns.nic.club. hostmaster.neustar.biz. 1539532881 900 900 604800 60

;; Query time: 20 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Sun Oct 14 18:23:59 CEST 2018
;; MSG SIZE  rcvd: 107

sandermacbook:~ sanderlentink$ dig DS os3.club

; <<>> DiG 9.10.6 <<>> DS os3.club
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 23598
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;os3.club.			IN	DS

;; ANSWER SECTION:
os3.club.		3599	IN	DS	35148 7 1 6ED7AD9EDC9AB06F50D2DE3870F9AD25CD649EF2
os3.club.		3599	IN	DS	35148 7 2 7507E5404A929511163BD46EA9A9276D6D6C40186B8C7B560A2080D4 F8673672

</code>

=== Q14. Show the results of the examination of your secured domain  ===

{{:2018-2019:students:sander_lentink:cia:clubresult.png?direct|}}

And just when I finished setting up this alternative setup,
I got an email from Niels:
{{:2018-2019:students:sander_lentink:cia:screenshot_2018-10-14_at_19.43.07.png?direct}}

We see on the other tool that IPv6 is not reachable,
which is correct, since I only listen on IPv4.
But the DS records work!

=== Q15. Describe the DS and DNSKEY records from os3 nl down that are important for your domain Which keys are used to sign them?  ===

<code>
dig nevers.prac.os3.nl DNSKEY \
  +dnssec +trace +multiline \
  |grep 'DNSKEY\|DS\|RRSIG'
; <<>> DiG 9.10.6 <<>> nevers.prac.os3.nl DNSKEY +dnssec +trace +multiline
.			231016 IN RRSIG	NS 8 0 518400 (
nl.			86400 IN DS 34112 8 2 (
nl.			86400 IN RRSIG DS 8 1 86400 (
os3.nl.			3600 IN	DS 64426 5 2 (
os3.nl.			3600 IN	RRSIG DS 8 2 3600 (
nevers.prac.os3.nl.	21600 IN DS 51934 8 2 (
nevers.prac.os3.nl.	21600 IN DS 51934 8 1 (
nevers.prac.os3.nl.	21600 IN RRSIG DS 5 4 21600 (
nevers.prac.os3.nl.	60 IN DNSKEY 257 3 8 (
nevers.prac.os3.nl.	60 IN DNSKEY 256 3 8 (
nevers.prac.os3.nl.	60 IN RRSIG DNSKEY 8 4 60 (
nevers.prac.os3.nl.	60 IN RRSIG DNSKEY 8 4 60 (

dig os3.nl DNSKEY \
  +dnssec +trace +multiline \
  |grep 'DNSKEY\|DS\|RRSIG'
; <<>> DiG 9.10.6 <<>> os3.nl DNSKEY +dnssec +trace +multiline
.			49322 IN RRSIG NS 8 0 518400 (
nl.			86400 IN DS 34112 8 2 (
nl.			86400 IN RRSIG DS 8 1 86400 (
os3.nl.			3600 IN	DS 64426 5 2 (
os3.nl.			3600 IN	RRSIG DS 8 2 3600 (
os3.nl.			21600 IN DNSKEY	257 3 5 (
os3.nl.			21600 IN DNSKEY	256 3 5 (
os3.nl.			21600 IN RRSIG DNSKEY 5 2 21600 (
os3.nl.			21600 IN RRSIG DNSKEY 5 2 21600 (

</code>

We first note that . delegates nl,
nl delegates os3 and
os3 delegates nevers.prac,
there is no delegation in between.

In the snipet above, we see the two DNSKEYs of os3.nl, the KSK and ZSK.
As we saw from the ls command above, we have the K*.key (pub) en the K*.private key pairs.
The DNSKEYs are the public keys. The parent stores a hash of the KSK key as DS record.

For every level of delegation,
we have a DS record at the parent,
which is a hash of the KSK of the subject.
This subject has a ZSK which it uses to sign its zone,
and the ZSK is signed by the KSK.
This forms a chain in DNSSEC.

=== Q16. Start planning for a Zone Signing Key rollover  ===
== a. Describe the options for doing a ZSK rollover make a motivated choice for one procedure  == 
== b. How do you implement this procedure with the tools for signing your zone?  == 
== c. Which timers are important for this procedure?  == 
== d. Implement the procedure and use a DNSSEC debugger to verify each step Don't forget to show the results of each verification  == 

=== Q17. Can you use the same procedure for a KSK rollover? What does this depend on?  ===


